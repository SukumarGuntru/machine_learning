---Logistic Regression---
I implemented logistic regression and applied it to two diﬀerent datasets
logistic regression model to predict whether a student gets admitted into a university
Suppose that I am the administrator of a university department and I want to determine 
each applicant’s chance of admission based on their results on two exams. I have historical
data from previous applicants that I can use as a training set for logistic regression. 
For each training example, I have the applicant’s scores on two exams and the admissions decision. 
Our task is to build a classiﬁcation model that estimates an applicant’s probability of admission based 
the scores from those two exams.
 1.1 Visualizing the data
Before starting to implement any learning algorithm, it is always good to visualize the data if possible. 
In the ﬁrst part of ex2.m, the code will load the data and display it on a 2-dimensional plot by calling the function plotData.
we will now complete the code in plotData so that it displays a ﬁgure like 'Figure' , where the axes are the two exam scores, 
and the positive and negative examples are shown with diﬀerent markers.
1.2 Implementation
The logistic regression hypothesis is deﬁned as:
     hθ(x) = g(θTx),
where function g is the sigmoid function. The sigmoid function is deﬁned as:
   g(z) = 1 /1 + e−z.
   
1.2.2 Cost function and gradient
Now we will implement the cost function and gradient for logistic regression.The code in costFunction returns the cost and gradient. 
The cost function in logistic regression is
J(θ) =1/m * sigma(i=1 to m)[−(y(i))*log(hθ(x(i)))−(1−y(i))*log(1−hθ(x(i))), and the gradient of the cost is a vector of the same length as θ
where the jth element (for j = 0,1,...,n) is deﬁned as follows:
∂J(θ)/ ∂θj =1/m*sigma( i=1 to m) (hθ(x(i))−y(i))x(i).

1.2.3 Learning parameters using fminunc
In above code we wrote a cost function and calculated its gradient, then took a gradient descent step accordingly. This time, instead of taking gradient descent steps, 
we will use an Octave/MATLAB built-in function called fminunc. Octave/MATLAB’s fminunc is an optimization solver that ﬁnds the minimum of an unconstrained2 function.
For logistic regression, we want to optimize the cost function J(θ) with parameters θ. Concretely, we are going to use fminunc to ﬁnd the best parameters θ for the 
logistic regression cost function, given a ﬁxed dataset (of X and y values). We will pass to fminunc the following inputs:
• The initial values of the parameters we are trying to optimize. • A function that, when given the training set and a particular θ, computes the logistic regression cost 
and gradient with respect to θ for the dataset (X, y)
In ex2.m, we already have code written to call fminunc with the correct arguments.

% Set options for fminunc options = optimset('GradObj', 'on', 'MaxIter', 400);
% Run fminunc to obtain the optimal theta
% This function will return theta and the cost [theta, cost] = ... fminunc(@(t)(costFunction(t, X, y)), initial theta, options);
In this code snippet, we ﬁrst deﬁned the options to be used with fminunc. Speciﬁcally, we set the GradObj option to on, which tells fminunc that our function returns both
the cost and the gradient. This allows fminunc to use the gradient when minimizing the function. Furthermore, we set the MaxIter option to 400, so that fminunc will run for
at most 400 steps before it terminates. To specify the actual function we are minimizing, we use a “short-hand” for specifying functions with the @(t) ( costFunction(t, X, y) ) .
This creates a function, with argument t, which calls your costFunction. This allows us to wrap the costFunction for use with fminunc. If we have completed the costFunction correctly, 
fminunc will converge on the right optimization parameters and return the ﬁnal values of the cost and θ. Notice that by using fminunc, we did not have to write any loops ourself, or
set a learning rate like we did for gradient descent. This is all done by fminunc: we only needed to provide a function calculating the cost and the gradient. Once fminunc completes, ex2.m 
will call our costFunction function using the optimal parameters of θ. we should see that the cost is about 0.203. This ﬁnal θ value will then be used to plot the decision boundary on the training data,
resulting in a ﬁgure similar to . We also encourage you to look at the code in plotDecisionBoundary.m to see how to plot such a boundary using the θ values.

