---1 Logistic Regression---
I implemented logistic regression and applied it to two diﬀerent datasets .Logistic regression model to predict whether a student gets
admitted into a university.
Suppose that we are  the administrators of a university department and we want to determine each applicant’s chance of admission based
on their results on two exams. We have historical data from previous applicants that we can use as a training set for logistic regression. 
For each training example, we have the applicant’s scores on two exams and the admissions decision. Our task is to build a classiﬁcation
model that estimates an applicant’s probability of admission based the scores from those two exams.
 1.1 Visualizing the data
Before starting to implement any learning algorithm, it is always good to visualize the data if possible. In the ﬁrst part of ex2.m, 
the code will load the data and display it on a 2-dimensional plot by calling the function plotData.we will now complete the code in 
plotData so that it displays a ﬁgure like 'Figure' , where the axes are the two exam scores, and the positive and negative examples are 
shown with diﬀerent markers.
1.2 Implementation
The logistic regression hypothesis is deﬁned as:
     hθ(x) = g(θTx),
where function g is the sigmoid function. The sigmoid function is deﬁned as:
   g(z) = 1 /1 + e−z.
   
1.2.2 Cost function and gradient
Now we will implement the cost function and gradient for logistic regression.The code in costFunction returns the cost and gradient. 
The cost function in logistic regression is
J(θ) =1/m * sigma(i=1 to m)[−(y(i))*log(hθ(x(i)))−(1−y(i))*log(1−hθ(x(i))), and the gradient of the cost is a vector of the same length 
as θ
where the jth element (for j = 0,1,...,n) is deﬁned as follows:
∂J(θ)/ ∂θj =1/m*sigma( i=1 to m) (hθ(x(i))−y(i))x(i).

1.2.3 Learning parameters using fminunc
In above code we wrote a cost function and calculated its gradient, then took a gradient descent step accordingly. This time, instead of 
taking gradient descent steps, we will use an Octave/MATLAB built-in function called fminunc. Octave/MATLAB’s fminunc is an optimization
solver that ﬁnds the minimum of an unconstrained2 function.For logistic regression, we want to optimize the cost function J(θ) with 
parameters θ. Concretely, we are going to use fminunc to ﬁnd the best parameters θ for the logistic regression cost function, given a 
ﬁxed dataset (of X and y values). We will pass to fminunc the following inputs:
• The initial values of the parameters we are trying to optimize. • A function that, when given the training set and a particular θ, 
computes the logistic regression cost and gradient with respect to θ for the dataset (X, y)In ex2.m, we already have code written to call
fminunc with the correct arguments.
-------    ----------
% Set options for fminunc options = optimset('GradObj', 'on', 'MaxIter', 400);
% Run fminunc to obtain the optimal theta
% This function will return theta and the cost [theta, cost] = ... fminunc(@(t)(costFunction(t, X, y)), initial theta, options);
---------- ---------
In this code snippet, we ﬁrst deﬁned the options to be used with fminunc. Speciﬁcally, we set the GradObj option to on, which tells 
fminunc that our function returns boththe cost and the gradient. This allows fminunc to use the gradient when minimizing the function. 
Furthermore, we set the MaxIter option to 400, so that fminunc will run for at most 400 steps before it terminates. To specify the 
actual function we are minimizing, we use a “short-hand” for specifying functions with the @(t) ( costFunction(t, X, y) ) .
This creates a function, with argument t, which calls your costFunction. This allows us to wrap the costFunction for use with fminunc. 
If we have completed the costFunction correctly, fminunc will converge on the right optimization parameters and return the ﬁnal values 
of the cost and θ. Notice that by using fminunc, we did not have to write any loops ourself, or set a learning rate like we did for
gradient descent. This is all done by fminunc: we only needed to provide a function calculating the cost and the gradient. Once fminunc 
completes, ex2.m will call our costFunction function using the optimal parameters of θ. we should see that the cost is about 0.203. 
This ﬁnal θ value will then be used to plot the decision boundary on the training data,resulting in a ﬁgure similar to 'Decision Boundary'. 
---2 Regularized logistic regression---
We will implement regularized logistic regression to predict whether microchips from a fabrication plant passes quality assurance (QA).
During QA, each microchip goes through various tests to ensure it is functioning correctly. Suppose we are product managers of the 
factory and we have the test results for some microchips on two diﬀerent tests. From these two tests, you would like to determine 
whether the microchips should be accepted or rejected. To help you make the decision, you have a dataset of test results on past 
microchips, from which you can build a logistic regression model.We will use another script, ex2_reg.m to complete this portion.
2.1 Visualizing the data
Similar to the previous parts of this exercise, plotData is used to generate a ﬁgure like Figure 3, where the axes are the two test 
scores, and the positive (y = 1, accepted) and negative (y = 0, rejected) examples are shown with diﬀerent markers.
Figure 'Input-Features-Regularized' shows that our dataset cannot be separated into positive and negative examples by a straight-line
through the plot. Therefore, a straightforward application of logistic regression will not perform well on this dataset since logistic 
regression will only be able to ﬁnd a linear decision boundary.
2.2 Feature mapping
One way to ﬁt the data better is to create more features from each data point. In the provided function mapFeature.m, we will map the 
features into all polynomial terms of x1 and x2 up to the sixth power.
mapFeature(x) =[1 x1 x2 x1^2  x1x2 x2^2 x3x11 . . . x1x5^2 x6^2]
As a result of this mapping, our vector of two features (the scores on two QA tests) has been transformed into a 28-dimensional vector.
A logistic regression classiﬁer trained on this higher-dimension feature vector will have a more complex decision boundary and will 
appear nonlinear when drawn in our 2-dimensional plot. While the feature mapping allows us to build a more expressive classiﬁer, 
it also more susceptible to overﬁtting.

2.3 Cost function and gradient
Now we will implement code to compute the cost function and gradient for regularized logistic regression.The code in costFunctionReg.m
will return the cost and gradient.The regularized cost function in logistic regression is
J(θ) =1/ m*(sigma i=1 to m)[−y(i)*log(hθ(x(i)))−(1−y(i))*log(1−hθ(x(i)))]+ λ /2m *(sigma j=1 to n)[θj^2].
Note that here we should not regularize the parameter θ0. In Octave/MATLAB,indexing starts from 1, hence, we should not be regularizing 
the theta(1) parameter (which corresponds to θ0) in the code. The gradient of the cost function is a vector where the jth element is
deﬁned as follows:
∂J(θ)/∂θ0 =1/ m*(sigma i=1 to m)[(hθ(x(i))−y(i))x(i)j] for j = 0
∂J(θ)/∂θj = 1/m* (sigma i=1 to m)[(hθ(x(i))−y(i))x(i)j] + λ/m[θj] for j ≥ 1
Once we are done, ex2 reg.m will call our costFunctionReg function using the initial value of θ (initialized to all zeros). We should 
see that the cost is about 0.693.

2.3.1 Learning parameters using fminunc
Similar to the previous parts, we will use fminunc to learn the optimal parameters θ. If we have completed the cost and gradient for
regularized logistic regression (costFunctionReg.m) correctly, we should be able to step through the next part of ex2 reg.m to learn the
parameters θ using fminunc.
2.4 Plotting the decision boundary
We have the function plotDecisionBoundary.m which plots the (non-linear) decision boundary that separates the positive and negative 
examples. In plotDecisionBoundary.m, we plot the non-linear decision boundary by computing the classiﬁer’s predictions on an evenly 
spaced grid and then and drew a contour plot of where the predictions change from y = 0 to y = 1. After learning the parameters θ, 
the next step in ex_reg.m will plot a decision boundary similar to 'Regularized-Hupothesis.' .





